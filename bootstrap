#!/usr/bin/env python3

import argparse
import json
import os

from bs_tools.tools import validating_user_input, load_dotfiles
from bs_tools import bootstrap_opts

IGNORE = [
    'README.md',
    'bs_tools/*',
    'bootstrap',
    '.gitignore',
    '.git/*',
    '.idea/*',
    '*~',
    'venv/*',
    'uninstall',
    'dotfile-bootstrap/*',
    'bs_ignore.json'
]


def symlink_files(skip_files, skip_folders):
    overwrite_all = False

    ignore_files = IGNORE + skip_files + [x + "/*" for x in skip_folders]
    files = load_dotfiles(ignore_files)

    for file in files:
        opts = bootstrap_opts.parse_opts(file)
        filename = os.path.basename(file)
        file = os.path.join(os.getcwd(), file)

        for opt, fcn in bootstrap_opts.BOOTSTRAP_OPTS:
            val = opts.get(opt, False)
            if val:
                filename = fcn(filename, val)

        print("Preparing to symlink " + file + " to " + filename)

        if os.path.lexists(filename):
            if not overwrite_all:
                inpt = validating_user_input("{filename} exists. Overwrite?".format(
                    filename=filename
                ))

                if inpt == 'n':
                    print("Symlink aborted.\n")
                    continue  # go to next file
                if inpt == 'a':
                    overwrite_all = True

            os.remove(filename)

        filepath = os.path.dirname(filename)
        if not os.path.exists(filepath):
            os.mkdir(filepath)

        os.symlink(file, filename)
        print("Symlink created!\n")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument('-s', '--symlink', action='store_true')
    parser.add_argument('-c', '--config', metavar="config-file",
                        help="Specify configuration of dotfiles")
    parser.add_argument('-f', '--no-install-file', action='append',
                        help="Skip installing specified file. Note: if filename"
                             " is not unique, you must specify folder as well"
                             " (ex: path/file.txt)",
                        metavar='file-to-skip', default=[])
    parser.add_argument('-F', '--no-install-folder', action='append',
                        help="Skip installing any files from specified folder",
                        metavar='folder-to-skip', default=[])

    args = parser.parse_args()

    try:
        with open("bs_ignore.json") as ignore:
            print("Ignoring files as specified in bs_ignore.json")
            ignore_files = json.load(ignore)
            IGNORE.extend(ignore_files)
    except FileNotFoundError as e:
        pass

    if args.config:
        # break configuration file down into appropriate arguments
        update_args = vars(args)

        with open(args.config) as config_file:
            conf = json.load(config_file)

            for key, value in conf.items():
                if isinstance(update_args[key], list):
                    update_args[key].extend(value)

    if args.symlink:
        symlink_files(args.no_install_file, args.no_install_folder)
